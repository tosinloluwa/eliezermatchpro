This morning's Schedule

General Announcements/Talks
General Class
	Database Systems
 	APIs
Hands-On
Group/Teams Discussions



MD 2024 Group
Grouping Across Learning Track
Upwork/Fiver
Promt Engineering
Incubation Hub (Office) for Projects (Power, Internet)
Specialization: Front-End/Backend/AI/Animations

















/Product Management

Focus on Product Management
Product Strategy (SDLC)
Market Research and Analysis
Product Planning and Roadmapping
Requirements Gathering and Prioritization
User Experience (UX) Design
Product Development and Engineering Collaboration
Product Launch and Go-to-Market Strategy
Product Metrics and Analytics
Iterative Improvement and Optimization
Stakeholder Communication and Collaboration
Risk Management and Mitigation
Product Lifecycle Management

A product can be defined as a tangible or intangible item or service that is offered to fulfill a need or desire of a customer. 

Venture Capital For Afric Update
Profile Project (http://localhost/profile/test/) after starting 




Database SYstems

Connecting to database in React/NodeJS
1. create Database system (Xampp, mysql, phpmyadmin)
2. get the mysql plugin working on node (npm install mysql)
3. create the express server script (server.js). This connects nodeJs to your database, enables your endpoints
4. check that the connection is working with the command "node server.js" system
5. Check the endpoint using the ports

// Define route handler for root URL in  your server.js
app.get('/', (req, res) => {
  res.send('Hello World!');
});

//



6. Enable CORS and use it in your Express app to enable Cross-Origin Resource Sharing (CORS) for your React app.


/////////////////////run on terminal
   npm install cors

//////////////////////////////// in server.js, add
const cors = require('cors');
app.use(cors());




APIs
  Restful APIs

  Consume (front end)
  GEnerate (backend)

  Representational State Transfer


  Application PRogramming Interface (API)
   

  Postman
/////////////////////////////
APIs (Application Programming Interfaces) along with their meanings and examples:

API (Application Programming Interface): A set of rules and protocols that allows different software applications to communicate with each other. APIs define the methods and data formats that developers should use to interact with a system.

Example: Twitter API allows developers to access Twitter's data and functionality, such as tweeting, searching for tweets, and retrieving user information.

Endpoint: A specific URL where API requests are sent. Each endpoint represents a different function or resource provided by the API. (JSON)

Example: https://api.example.com/users is an endpoint for retrieving user information in an imaginary API.

Request: An HTTP request made by a client to an API endpoint to perform a specific action or retrieve data.

Example: Sending a GET request to the /posts endpoint to retrieve a list of posts from a blog API.

Response: The data returned by the API after processing a request. Responses typically include status codes, headers, and the requested data in a specific format like JSON or XML.

Example: A JSON response from the Twitter API containing information about a tweet.

json
Copy code


{
  "id": 123456789,
  "text": "Hello, Twitter!",
  "user": {
    "id": 987654321,
    "name": "John Doe"
  }
}



HTTP Methods (or Verbs): Actions that can be performed on resources using HTTP. The most common methods are GET (retrieve), POST (create), PUT (update), DELETE (delete), etc.

Example: Using a POST request to create a new user in a user management API.

Authentication: The process of verifying the identity of a user or application trying to access an API. Authentication ensures that only authorized users can access protected resources.

Example: Using an API key or OAuth token to authenticate requests to the GitHub API.

Rate Limiting: A restriction imposed by APIs on the number of requests a client can make within a specific period. Rate limiting helps maintain system performance and prevent abuse.

Example: A service may allow only 1000 requests per hour per user.

SDK (Software Development Kit): A set of tools, libraries, and documentation provided by a software vendor to help developers integrate with their API more easily.

Example: The AWS SDK for Java provides Java developers with tools for accessing Amazon Web Services.

REST (Representational State Transfer): A design architecture for building networked applications. RESTful APIs use HTTP requests to perform CRUD operations (Create, Read, Update, Delete) on resources.

Example: The GitHub API follows REST principles, with endpoints like /repos for repositories and /issues for issue tracking.

JSON (JavaScript Object Notation): A lightweight data-interchange format used to transmit data between a server and a client. JSON is easy for humans to read and write and easy for machines to parse and generate.

Example:

json
Copy code
{
  "name": "John",
  "age": 30,
  "city": "New York"
}
These are just a few of the fundamental terms related to APIs that beginners should be familiar with. Understanding these terms will help you get started with working with APIs effectively.



Example with Fincra with Prompt Enginnering



https://docs.fincra.com/reference/get-business-id-1







